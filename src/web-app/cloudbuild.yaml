### [BUILD APP] ###
steps:
  # Install dependencies
  - name: python
    entrypoint: pip
    args: ["install", "-r", "requirements.txt", "--user"]

  # Run unit tests against app
  - name: python
    entrypoint: python
    args: ["-m", "MYSQL_DATABASE_PASSWORD=$$DB_PASSWORD DB_HOST=$$DB_HOST pytest", "--junitxml=${SHORT_SHA}_test_log.xml"]
    secretEnv: ['DB_PASSWORD']
    env:
      - 'DB_HOST=10.20.208.3'


### [BUILD CONTAINER] ###
steps:
  # Build container image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/${PROJECT_ID}/web-app:${_APP_VERSION}', '.']


### [SCAN CONTAINER] ###
steps:
   - id: inspect
     name: gcr.io/cloud-builders/docker
     entrypoint: /bin/bash
     args:
     - -c
     - |
       docker image inspect gcr.io/${PROJECT_ID}/web-app:${_APP_VERSION} --format \
         '{{index .RepoTags 0}}@{{.Id}}' > /workspace/image-digest.txt
       cat image-digest.txt
   
   - id: scan
     name: gcr.io/cloud-builders/gcloud
     entrypoint: /bin/bash
     args:
     - -c
     - |
       gcloud artifacts docker images scan gcr.io/${PROJECT_ID}/web-app:${_APP_VERSION} \
       --format='value(response.scan)' > /workspace/scan_id.txt

   - id: severity check
     name: gcr.io/cloud-builders/gcloud
     entrypoint: /bin/bash
     args:
     - -c
     - | # Check the vulnerabilities and exit if it meets severity level
       gcloud artifacts docker images list-vulnerabilities \
        $(cat /workspace/scan_id.txt) --format='value(vulnerability.effectiveSeverity)' \
        | if grep -Fxq $_SEVERITY 
          then echo 'Failed vulnerability check'
          exit 1 
          fi


### [PUBLISH APP] ###
steps:
  # Publish container image/application to GCR
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '-image', 'gcr.io/${PROJECT_ID}/web-app:${_APP_VERSION}']

availableSecrets:
  secretManager:
  - versionName: projects/791112449288/secrets/WEB_APP_DB_PASSWORD
    env: 'DB_PASSWORD'

substitutions:
    _APP_VERSION: 0.1.12